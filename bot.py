import logging
import json
import os
import re
from datetime import datetime
from typing import Dict, List, Set
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ChatMemberStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_ID = 946695591
BOT_TOKEN = "8456387820:AAEpFPpRPntlBV0hAmAPIRIwk5KoxLlwDnA"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
chat_data = {}  # {chat_id: {"bots": set(), "manual_bots": set(), "ignored_bots": set()}}
DATA_FILE = "bot_data.json"

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    global chat_data
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
                for chat_id, info in data.items():
                    chat_data[int(chat_id)] = {
                        "bots": set(info.get("bots", [])),
                        "manual_bots": set(info.get("manual_bots", [])),
                        "ignored_bots": set(info.get("ignored_bots", []))
                    }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        chat_data = {}

def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON
        data_to_save = {}
        for chat_id, info in chat_data.items():
            data_to_save[str(chat_id)] = {
                "bots": list(info["bots"]),
                "manual_bots": list(info["manual_bots"]),
                "ignored_bots": list(info["ignored_bots"])
            }
        
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def is_bot_by_username(user):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º –ø–æ username"""
    if not user or not user.username:
        return False
    
    username = user.username.lower()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "bot" –≤ username
    return "bot" in username

def is_spam_message(message_text: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –±–µ–∑ –ò–ò - –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    if not message_text:
        return False
    
    text = message_text.lower()
    
    # –°–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    spam_patterns = [
        # –†–µ–∫–ª–∞–º–∞ –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø
        r'(–ø–æ–¥–ø–∏—Å—ã–≤|subscribe|join|–ø—Ä–∏—Å–æ–µ–¥–∏–Ω)[^.]*(@|t\.me|telegram)',
        r'(–Ω–∞—à\s+–∫–∞–Ω–∞–ª|–Ω–∞—à–∞\s+–≥—Ä—É–ø–ø–∞|our\s+channel|our\s+group)',
        r'(–∂–º–∏\s+|–Ω–∞–∂–º–∏\s+|click\s+|tap\s+).*(—Å—Å—ã–ª–∫|link)',
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞
        r'(–∑–∞—Ä–∞–±–æ—Ç|earn|profit|–¥–æ—Ö–æ–¥)[^.]*(\$|\d+|—Ä—É–±–ª|usd)',
        r'(–∏–Ω–≤–µ—Å—Ç|invest|–≤–∫–ª–∞–¥|–¥–µ–ø–æ–∑–∏—Ç)[^.]*(\%|–ø—Ä–æ—Ü–µ–Ω—Ç|profit)',
        r'(–±–∏–Ω–∞—Ä–Ω|binary|–æ–ø—Ü–∏–æ–Ω|trading|—Ç—Ä–µ–π–¥)',
        
        # –ê–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã
        r'(–∫–∞–∑–∏–Ω–æ|casino|—Å—Ç–∞–≤–∫|bet|—Å–ª–æ—Ç|slot)',
        r'(–≤—ã–∏–≥—Ä|win)[^.]*(\$|\d+.*—Ä—É–±–ª|\d+.*usd)',
        
        # –ü—Ä–æ–º–æ-–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏
        r'(–ø—Ä–æ–º–æ|promo|—Å–∫–∏–¥–∫|discount|–∫–æ–¥)[^.]*(\d+|\%)',
        r'(–∞–∫—Ü–∏|action|offer|–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏)',
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        r't\.me/[^/\s]+',
        r'@[a-zA-Z0-9_]{5,}',
        
        # –°–ø–∞–º-—Ñ—Ä–∞–∑—ã
        r'(–±–µ—Å–ø–ª–∞—Ç–Ω|free)[^.]*(\$|\d+|–ø–æ–¥–∞—Ä–æ–∫|gift)',
        r'(—Ç–æ–ª—å–∫–æ\s+—Å–µ–≥–æ–¥–Ω—è|today\s+only|–æ–≥—Ä–∞–Ω–∏—á–µ–Ω|limited)',
        r'(–Ω–µ\s+—É–ø—É—Å—Ç–∏|don\'t\s+miss|—Å—Ä–æ—á–Ω–æ|urgent)'
    ]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    spam_score = 0
    for pattern in spam_patterns:
        if re.search(pattern, text, re.IGNORECASE):
            spam_score += 1
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –∏ —Å—Å—ã–ª–æ–∫
    emoji_count = len(re.findall(r'[^\w\s]', text))
    link_count = len(re.findall(r'(http|t\.me|@)', text))
    
    if emoji_count > 10 or link_count > 2:
        spam_score += 1
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ 2 –∏–ª–∏ –±–æ–ª—å—à–µ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    return spam_score >= 2

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    
    if user_id == ADMIN_ID:
        await update.message.reply_text(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ username —Å 'bot')."
        )
    else:
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤.\n\n"
            "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç –∏ –¥–∞–π –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /botlist —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±–æ—Ç–æ–≤."
        )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤", callback_data="admin_stats")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤", callback_data="admin_chats")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_refresh")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
    if update.effective_user.id == ADMIN_ID:
        if query.data == "admin_stats":
            total_chats = len(chat_data)
            total_bots = sum(len(info["bots"]) + len(info["manual_bots"]) for info in chat_data.values())
            
            text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            text += f"üîπ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n"
            text += f"üîπ –í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±–æ—Ç–æ–≤: {total_bots}\n"
            text += f"üîπ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            await query.edit_message_text(text)
            return
        
        elif query.data == "admin_chats":
            if not chat_data:
                await query.edit_message_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
                return
            
            text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:\n\n"
            for chat_id, info in list(chat_data.items())[:10]:
                bots_count = len(info["bots"]) + len(info["manual_bots"])
                text += f"üî∏ Chat ID: {chat_id}\n"
                text += f"   –ë–æ—Ç–æ–≤: {bots_count}\n\n"
            
            if len(chat_data) > 10:
                text += f"... –∏ –µ—â–µ {len(chat_data) - 10} —á–∞—Ç–æ–≤"
            
            await query.edit_message_text(text)
            return
        
        elif query.data == "admin_refresh":
            save_data()
            await query.edit_message_text("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ –≤ —á–∞—Ç–∞—Ö
    if query.data.startswith("add_bot_") or query.data.startswith("remove_bot_"):
        chat_id = int(query.data.split("_")[-1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
        try:
            member = await context.bot.get_chat_member(chat_id, update.effective_user.id)
            if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –±–æ—Ç–æ–≤.")
                return
        except:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤.")
            return
        
        if query.data.startswith("add_bot_"):
            await query.edit_message_text(
                "‚ûï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n\n"
                "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /addbot\n"
                "2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /addbot @username_–±–æ—Ç–∞"
            )
        
        elif query.data.startswith("remove_bot_"):
            info = chat_data.get(chat_id, {"bots": set(), "manual_bots": set(), "ignored_bots": set()})
            all_bots = info["bots"].union(info["manual_bots"]) - info["ignored_bots"]
            
            if not all_bots:
                await query.edit_message_text("‚ùå –ù–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            
            keyboard = []
            for bot_id in list(all_bots)[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                try:
                    bot_info = await context.bot.get_chat(bot_id)
                    bot_name = bot_info.username or bot_info.first_name or str(bot_id)
                except:
                    bot_name = str(bot_id)
                
                keyboard.append([InlineKeyboardButton(
                    f"‚ùå {bot_name[:20]}...", 
                    callback_data=f"ignore_bot_{chat_id}_{bot_id}"
                )])
            
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_botlist")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )
    
    elif query.data.startswith("ignore_bot_"):
        parts = query.data.split("_")
        chat_id = int(parts[2])
        bot_id = int(parts[3])
        
        if chat_id not in chat_data:
            chat_data[chat_id] = {"bots": set(), "manual_bots": set(), "ignored_bots": set()}
        
        chat_data[chat_id]["ignored_bots"].add(bot_id)
        save_data()
        
        await query.edit_message_text(f"‚úÖ –ë–æ—Ç {bot_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

async def botlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /botlist - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –≤ —á–∞—Ç–µ"""
    chat_id = update.effective_chat.id
    
    if chat_id not in chat_data:
        await update.message.reply_text("ü§ñ –í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±–æ—Ç–æ–≤.")
        return
    
    info = chat_data[chat_id]
    all_bots = info["bots"].union(info["manual_bots"]) - info["ignored_bots"]
    
    if not all_bots:
        await update.message.reply_text("ü§ñ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        return
    
    text = "ü§ñ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –±–æ—Ç—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n"
    for i, bot_id in enumerate(all_bots, 1):
        try:
            bot_info = await context.bot.get_chat(bot_id)
            bot_name = f"@{bot_info.username}" if bot_info.username else bot_info.first_name
        except:
            bot_name = str(bot_id)
        
        text += f"{i}. {bot_name} (ID: {bot_id})\n"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞)
    try:
        member = await context.bot.get_chat_member(chat_id, update.effective_user.id)
        if member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞", callback_data=f"add_bot_{chat_id}")],
                [InlineKeyboardButton("‚ûñ –ò—Å–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data=f"remove_bot_{chat_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text)
    except:
        await update.message.reply_text(text)

async def addbot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"""
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        member = await context.bot.get_chat_member(chat_id, update.effective_user.id)
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–≤.")
            return
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤.")
        return
    
    if chat_id not in chat_data:
        chat_data[chat_id] = {"bots": set(), "manual_bots": set(), "ignored_bots": set()}
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ - –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        if is_bot_by_username(target_user) or target_user.is_bot:
            chat_data[chat_id]["manual_bots"].add(target_user.id)
            save_data()
            
            username = f"@{target_user.username}" if target_user.username else target_user.first_name
            await update.message.reply_text(f"‚úÖ –ë–æ—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")
        else:
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –±–æ—Ç.")
        return
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username
    if context.args:
        username = context.args[0].replace("@", "")
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
            await update.message.reply_text(
                f"üîç –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è @{username} –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, "
                f"–∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /addbot"
            )
        except:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: /addbot\n"
            "‚Ä¢ –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ username: /addbot @username"
        )

async def handle_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç"""
    message = update.message
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –Ω–∞—à –±–æ—Ç
    for member in message.new_chat_members:
        if member.id == context.bot.id:
            # –ù–∞—à –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
            if chat_id not in chat_data:
                chat_data[chat_id] = {
                    "bots": set(),
                    "manual_bots": set(),
                    "ignored_bots": set()
                }
                save_data()
            
            welcome_text = (
                "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤.\n\n"
                "‚ö†Ô∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /botlist - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±–æ—Ç–æ–≤\n"
                "‚Ä¢ /addbot - –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n\n"
                "üéØ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é –±–æ—Ç–æ–≤ –ø–æ –∏—Ö username (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'bot')"
            )
            
            await message.reply_text(welcome_text)
            break

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = update.message
    if not message or not message.text:
        return
    
    chat_id = message.chat.id
    user = message.from_user
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
    if user.id == context.bot.id:
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if chat_id not in chat_data:
        chat_data[chat_id] = {
            "bots": set(),
            "manual_bots": set(),
            "ignored_bots": set()
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –±–æ—Ç–æ–º
    is_bot = user.is_bot or is_bot_by_username(user)
    
    if is_bot and user.id != context.bot.id:
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        chat_data[chat_id]["bots"].add(user.id)
        save_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö
        if user.id in chat_data[chat_id]["ignored_bots"]:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
        try:
            is_spam = is_spam_message(message.text)
            if is_spam:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                bot_member = await context.bot.get_chat_member(chat_id, context.bot.id)
                if (bot_member.status == ChatMemberStatus.ADMINISTRATOR and 
                    hasattr(bot_member, 'can_delete_messages') and 
                    bot_member.can_delete_messages):
                    
                    await message.delete()
                    
                    username = f"@{user.username}" if user.username else user.first_name
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({user.id}) –≤ —á–∞—Ç–µ {chat_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    notification = await context.bot.send_message(
                        chat_id,
                        f"üö´ –£–¥–∞–ª–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –æ—Ç {username}"
                    )
                    
                    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(5)
                    try:
                        await notification.delete()
                    except:
                        pass
                        
                else:
                    logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    total_chats = len(chat_data)
    total_bots = sum(len(info["bots"]) + len(info["manual_bots"]) for info in chat_data.values())
    
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    text += f"üîπ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {total_chats}\n"
    text += f"üîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±–æ—Ç–æ–≤: {total_bots}\n"
    text += f"üîπ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    
    if chat_data:
        text += "üìã –¢–æ–ø-5 —á–∞—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ—Ç–æ–≤:\n"
        sorted_chats = sorted(
            chat_data.items(),
            key=lambda x: len(x[1]["bots"]) + len(x[1]["manual_bots"]),
            reverse=True
        )[:5]
        
        for i, (chat_id, info) in enumerate(sorted_chats, 1):
            bots_count = len(info["bots"]) + len(info["manual_bots"])
            text += f"{i}. Chat {chat_id}: {bots_count} –±–æ—Ç–æ–≤\n"
    
    await update.message.reply_text(text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    load_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("botlist", botlist_command))
    application.add_handler(CommandHandler("addbot", addbot_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_member))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! (–ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
