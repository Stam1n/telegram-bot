import logging
import json
import os
import re
from datetime import datetime
from typing import Dict, Set
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ChatMemberStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_ID = 946695591
BOT_TOKEN = os.getenv('BOT_TOKEN')  # –í–æ–∑—å–º–∏ –∏–∑ Railway Variables

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
chat_data = {}  # {chat_id: {"bots": set(), "manual_bots": set(), "ignored_bots": set()}}
DATA_FILE = "bot_data.json"

def load_data():
    global chat_data
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                for chat_id, info in data.items():
                    chat_data[int(chat_id)] = {
                        "bots": set(info.get("bots", [])),
                        "manual_bots": set(info.get("manual_bots", [])),
                        "ignored_bots": set(info.get("ignored_bots", []))
                    }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        chat_data = {}

def save_data():
    try:
        data_to_save = {}
        for chat_id, info in chat_data.items():
            data_to_save[str(chat_id)] = {
                "bots": list(info["bots"]),
                "manual_bots": list(info["manual_bots"]),
                "ignored_bots": list(info["ignored_bots"])
            }
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def is_bot_by_username(username: str):
    if not username:
        return False
    return username.lower().endswith('bot')

async def is_spam_message(text: str) -> bool:
    if not text:
        return False
    text = text.lower()
    spam_patterns = [
        r'(–ø–æ–¥–ø–∏—Å—ã–≤|subscribe|join|–ø—Ä–∏—Å–æ–µ–¥–∏–Ω)[^.]*(@|t\.me|telegram)',
        r'(–Ω–∞—à\s+–∫–∞–Ω–∞–ª|–Ω–∞—à–∞\s+–≥—Ä—É–ø–ø–∞|our\s+channel|our\s+group)',
        r'(–∂–º–∏\s+|–Ω–∞–∂–º–∏\s+|click\s+|tap\s+).*(—Å—Å—ã–ª–∫|link)',
        r'(–∑–∞—Ä–∞–±–æ—Ç|earn|profit|–¥–æ—Ö–æ–¥)[^.]*(\$|\d+|—Ä—É–±–ª|usd)',
        r'(–∏–Ω–≤–µ—Å—Ç|invest|–≤–∫–ª–∞–¥|–¥–µ–ø–æ–∑–∏—Ç)[^.]*(\%|–ø—Ä–æ—Ü–µ–Ω—Ç|profit)',
        r'(–±–∏–Ω–∞—Ä–Ω|binary|–æ–ø—Ü–∏–æ–Ω|trading|—Ç—Ä–µ–π–¥)',
        r'(–∫–∞–∑–∏–Ω–æ|casino|—Å—Ç–∞–≤–∫|bet|—Å–ª–æ—Ç|slot)',
        r'(–≤—ã–∏–≥—Ä|win)[^.]*(\$|\d+.*—Ä—É–±–ª|\d+.*usd)',
        r'(–ø—Ä–æ–º–æ|promo|—Å–∫–∏–¥–∫|discount|–∫–æ–¥)[^.]*(\d+|\%)',
        r'(–∞–∫—Ü–∏|action|offer|–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏)',
        r't\.me/[^/\s]+',
        r'@[a-zA-Z0-9_]{5,}',
        r'(–±–µ—Å–ø–ª–∞—Ç–Ω|free)[^.]*(\$|\d+|–ø–æ–¥–∞—Ä–æ–∫|gift)',
        r'(—Ç–æ–ª—å–∫–æ\s+—Å–µ–≥–æ–¥–Ω—è|today\s+only|–æ–≥—Ä–∞–Ω–∏—á–µ–Ω|limited)',
        r'(–Ω–µ\s+—É–ø—É—Å—Ç–∏|don\'t\s+miss|—Å—Ä–æ—á–Ω–æ|urgent)'
    ]
    spam_score = sum(1 for pattern in spam_patterns if re.search(pattern, text, re.IGNORECASE))
    emoji_count = len(re.findall(r'[^\w\s]', text))
    link_count = len(re.findall(r'(http|t\.me|@)', text))
    if emoji_count > 10 or link_count > 2:
        spam_score += 1
    return spam_score >= 2

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:
        await update.message.reply_text(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n–ö–æ–º–∞–Ω–¥—ã:\n/admin - –ü–∞–Ω–µ–ª—å\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–ë–æ—Ç —É–¥–∞–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º—É –æ—Ç –±–æ—Ç–æ–≤ (–ø–æ username ends with 'bot')."
        )
    else:
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–¥–µ—Ä–∏—Ä—É—é —Ä–µ–∫–ª–∞–º—É –æ—Ç –±–æ—Ç–æ–≤.\n\n–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç, –¥–∞–π –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.\n/botlist - –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤."
        )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üìã –ß–∞—Ç—ã", callback_data="admin_chats")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")]
    ]
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id != ADMIN_ID and not query.data.startswith(('add_bot_', 'remove_bot_', 'ignore_bot_', 'back_to_botlist')):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    data = query.data
    if data == "admin_stats":
        total_chats = len(chat_data)
        total_bots = sum(len(info["bots"]) + len(info["manual_bots"]) for info in chat_data.values())
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüîπ –ß–∞—Ç–æ–≤: {total_chats}\nüîπ –ë–æ—Ç–æ–≤: {total_bots}\nüîπ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        await query.edit_message_text(text)
    elif data == "admin_chats":
        if not chat_data:
            await query.edit_message_text("üìã –ù–µ—Ç —á–∞—Ç–æ–≤.")
            return
        text = "üìã –ß–∞—Ç—ã:\n"
        for chat_id, info in list(chat_data.items())[:10]:
            text += f"üî∏ {chat_id}: {len(info['bots']) + len(info['manual_bots'])} –±–æ—Ç–æ–≤\n"
        if len(chat_data) > 10:
            text += f"... +{len(chat_data)-10}"
        await query.edit_message_text(text)
    elif data == "admin_refresh":
        save_data()
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ!")
    elif data.startswith("add_bot_"):
        chat_id = int(data.split("_")[-1])
        member = await context.bot.get_chat_member(chat_id, update.effective_user.id)
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã —á–∞—Ç–∞.")
            return
        await query.edit_message_text("‚ûï –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ /addbot –∏–ª–∏ /addbot @username")
    elif data.startswith("remove_bot_"):
        chat_id = int(data.split("_")[-1])
        member = await context.bot.get_chat_member(chat_id, update.effective_user.id)
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã —á–∞—Ç–∞.")
            return
        info = chat_data.get(chat_id, {"bots": set(), "manual_bots": set(), "ignored_bots": set()})
        all_bots = info["bots"].union(info["manual_bots"]) - info["ignored_bots"]
        if not all_bots:
            await query.edit_message_text("‚ùå –ù–µ—Ç –±–æ—Ç–æ–≤.")
            return
        keyboard = []
        for bot_id in list(all_bots)[:10]:
            bot_info = await context.bot.get_chat(bot_id)
            name = bot_info.username or bot_info.first_name or str(bot_id)
            keyboard.append([InlineKeyboardButton(f"‚ùå {name[:20]}...", callback_data=f"ignore_bot_{chat_id}_{bot_id}")])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"back_to_botlist_{chat_id}")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif data.startswith("ignore_bot_"):
        parts = data.split("_")
        chat_id = int(parts[2])
        bot_id = int(parts[3])
        if chat_id in chat_data:
            chat_data[chat_id]["ignored_bots"].add(bot_id)
            chat_data[chat_id]["bots"].discard(bot_id)
            chat_data[chat_id]["manual_bots"].discard(bot_id)
            save_data()
        await query.edit_message_text(f"‚úÖ –ë–æ—Ç {bot_id} –∏—Å–∫–ª—é—á—ë–Ω.")
    elif data.startswith("back_to_botlist_"):
        chat_id = int(data.split("_")[-1])
        info = chat_data.get(chat_id, {"bots": set(), "manual_bots": set(), "ignored_bots": set()})
        all_bots = info["bots"].union(info["manual_bots"]) - info["ignored_bots"]
        if not all_bots:
            text = "ü§ñ –ù–µ—Ç –±–æ—Ç–æ–≤."
        else:
            text = "ü§ñ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –±–æ—Ç—ã:\n"
            for i, bot_id in enumerate(all_bots, 1):
                bot_info = await context.bot.get_chat(bot_id)
                name = f"@{bot_info.username}" if bot_info.username else bot_info.first_name
                text += f"{i}. {name} ({bot_id})\n"
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_bot_{chat_id}")],
            [InlineKeyboardButton("‚ûñ –ò—Å–∫–ª—é—á–∏—Ç—å", callback_data=f"remove_bot_{chat_id}")]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def botlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in chat_data:
        await update.message.reply_text("ü§ñ –ù–µ—Ç –±–æ—Ç–æ–≤.")
        return
    info = chat_data[chat_id]
    all_bots = info["bots"].union(info["manual_bots"]) - info["ignored_bots"]
    if not all_bots:
        await update.message.reply_text("ü§ñ –ù–µ—Ç –±–æ—Ç–æ–≤.")
        return
    text = "ü§ñ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –±–æ—Ç—ã:\n"
    for i, bot_id in enumerate(all_bots, 1):
        bot_info = await context.bot.get_chat(bot_id)
        name = f"@{bot_info.username}" if bot_info.username else bot_info.first_name
        text += f"{i}. {name} ({bot_id})\n"
    member = await context.bot.get_chat_member(chat_id, update.effective_user.id)
    if member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_bot_{chat_id}")],
            [InlineKeyboardButton("‚ûñ –ò—Å–∫–ª—é—á–∏—Ç—å", callback_data=f"remove_bot_{chat_id}")]
        ]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text)

async def addbot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    member = await context.bot.get_chat_member(chat_id, update.effective_user.id)
    if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.")
        return
    if chat_id not in chat_data:
        chat_data[chat_id] = {"bots": set(), "manual_bots": set(), "ignored_bots": set()}
    if update.message.reply_to_message:
        reply_msg = update.message.reply_to_message
        target_id = reply_msg.from_user.id if reply_msg.from_user else reply_msg.sender_chat.id if reply_msg.sender_chat else None
        if target_id is None:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
            return
        chat_data[chat_id]["manual_bots"].add(target_id)
        chat_data[chat_id]["ignored_bots"].discard(target_id)  # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–≥–Ω–æ—Ä–∞, –µ—Å–ª–∏ –±—ã–ª
        save_data()
        name = reply_msg.from_user.username if reply_msg.from_user and reply_msg.from_user.username else reply_msg.sender_chat.username if reply_msg.sender_chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        await update.message.reply_text(f"‚úÖ @{name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")
        return
    if context.args:
        await update.message.reply_text("üîç –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è @username –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –∑–∞—Ç–µ–º reply /addbot")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n‚Ä¢ Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /addbot\n‚Ä¢ /addbot @username (reply –Ω–∞–¥—ë–∂–Ω–µ–µ)")

async def removebot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    member = await context.bot.get_chat_member(chat_id, update.effective_user.id)
    if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.")
        return
    if chat_id not in chat_data:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Ç–µ.")
        return
    if update.message.reply_to_message:
        reply_msg = update.message.reply_to_message
        target_id = reply_msg.from_user.id if reply_msg.from_user else reply_msg.sender_chat.id if reply_msg.sender_chat else None
        if target_id is None:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
            return
        if target_id not in chat_data[chat_id]["bots"] and target_id not in chat_data[chat_id]["manual_bots"]:
            await update.message.reply_text("‚ùå –ù–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            return
        chat_data[chat_id]["ignored_bots"].add(target_id)
        chat_data[chat_id]["bots"].discard(target_id)
        chat_data[chat_id]["manual_bots"].discard(target_id)
        save_data()
        name = reply_msg.from_user.username if reply_msg.from_user and reply_msg.from_user.username else reply_msg.sender_chat.username if reply_msg.sender_chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        await update.message.reply_text(f"‚úÖ @{name} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        return
    if context.args:
        await update.message.reply_text("üîç –î–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è @username reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ /removebot")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n‚Ä¢ Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /removebot\n‚Ä¢ /removebot @username (reply –Ω–∞–¥—ë–∂–Ω–µ–µ)")

async def refreshbot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    member = await context.bot.get_chat_member(chat_id, update.effective_user.id)
    if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.")
        return
    if chat_id not in chat_data:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Ç–µ.")
        return
    chat_data[chat_id]["bots"] = set()  # –û—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ-–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö
    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        for admin in admins:
            user = admin.user
            if (user.is_bot or is_bot_by_username(user.username)) and user.id != context.bot.id:
                chat_data[chat_id]["bots"].add(user.id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤: {e}")
    save_data()
    await update.message.reply_text("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω. –ë–æ—Ç—ã —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–æ–≤—ã–µ ‚Äî –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")

async def handle_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = message.chat.id
    for member in message.new_chat_members:
        if member.id == context.bot.id:
            if chat_id not in chat_data:
                chat_data[chat_id] = {"bots": set(), "manual_bots": set(), "ignored_bots": set()}
                save_data()
            await message.reply_text(
                "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–¥–µ—Ä–∏—Ä—É—é —Ä–µ–∫–ª–∞–º—É –æ—Ç –±–æ—Ç–æ–≤.\n\n‚ö†Ô∏è –î–∞–π—Ç–µ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/botlist\n/addbot\n/removebot\n/refreshbot\n\n–û–±–Ω–∞—Ä—É–∂–∏–≤–∞—é –ø–æ username ends with 'bot'."
            )
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            try:
                admins = await context.bot.get_chat_administrators(chat_id)
                for admin in admins:
                    user = admin.user
                    if (user.is_bot or is_bot_by_username(user.username)) and user.id != context.bot.id:
                        chat_data[chat_id]["bots"].add(user.id)
                save_data()
            except:
                pass
            break

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return
    chat_id = message.chat.id
    from_user = message.from_user
    sender_chat = message.sender_chat
    target_id = from_user.id if from_user else sender_chat.id if sender_chat else None
    if target_id == context.bot.id or target_id is None:
        return
    if chat_id not in chat_data:
        chat_data[chat_id] = {"bots": set(), "manual_bots": set(), "ignored_bots": set()}
    # –î–µ—Ç–µ–∫—Ü–∏—è –±–æ—Ç–∞
    is_bot = False
    username = ""
    if from_user:
        is_bot = from_user.is_bot or is_bot_by_username(from_user.username)
        username = from_user.username or from_user.first_name
    elif sender_chat:
        is_bot = is_bot_by_username(sender_chat.username)
        username = sender_chat.username
    if is_bot:
        chat_data[chat_id]["bots"].add(target_id)
        save_data()
    if target_id in chat_data[chat_id]["ignored_bots"]:
        return
    all_tracked = chat_data[chat_id]["bots"].union(chat_data[chat_id]["manual_bots"])
    if target_id not in all_tracked:
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (text –∏–ª–∏ caption)
    text = message.text or message.caption or ""
    if await is_spam_message(text):
        try:
            bot_member = await context.bot.get_chat_member(chat_id, context.bot.id)
            if bot_member.status == ChatMemberStatus.ADMINISTRATOR and bot_member.can_delete_messages:
                await message.delete()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ –æ—Ç {username} ({target_id}) –≤ {chat_id}")
                notification = await context.bot.send_message(chat_id, f"üö´ –£–¥–∞–ª–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –æ—Ç @{username}")
                await asyncio.sleep(5)
                await notification.delete()
            else:
                logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –≤ {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    total_chats = len(chat_data)
    total_bots = sum(len(info["bots"]) + len(info["manual_bots"]) for info in chat_data.values())
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüîπ –ß–∞—Ç–æ–≤: {total_chats}\nüîπ –ë–æ—Ç–æ–≤: {total_bots}\nüîπ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n–¢–æ–ø-5 —á–∞—Ç–æ–≤:\n"
    sorted_chats = sorted(chat_data.items(), key=lambda x: len(x[1]["bots"]) + len(x[1]["manual_bots"]), reverse=True)[:5]
    for i, (cid, info) in enumerate(sorted_chats, 1):
        text += f"{i}. {cid}: {len(info['bots']) + len(info['manual_bots'])} –±–æ—Ç–æ–≤\n"
    await update.message.reply_text(text)

def main():
    load_data()
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("botlist", botlist_command))
    application.add_handler(CommandHandler("addbot", addbot_command))
    application.add_handler(CommandHandler("removebot", removebot_command))
    application.add_handler(CommandHandler("refreshbot", refreshbot_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_member))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ 24/7)")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
